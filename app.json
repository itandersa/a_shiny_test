[{"name":"app.R","content":"# mydash/app.R\r\nlibrary('shiny')\r\nlibrary('shinydashboard')\r\n\r\n# ——— UI ———\r\nui <- dashboardPage(\r\n  dashboardHeader(title = \"DC Browser-Only Demo\"),\r\n  dashboardSidebar(\r\n    selectInput(\r\n      \"dataset\", \"Dataset\",\r\n      choices = c(\"iris\", \"mtcars\"), selected = \"iris\"\r\n    ),\r\n    uiOutput(\"var_picker\"),\r\n    sliderInput(\"n\", \"Sample size\", min = 10, max = 150, value = 50, step = 5),\r\n    checkboxInput(\"show_table\", \"Show sample table\", TRUE)\r\n  ),\r\n  dashboardBody(\r\n    fluidRow(\r\n      valueBoxOutput(\"nrows_box\", width = 4),\r\n      valueBoxOutput(\"ncols_box\", width = 4),\r\n      valueBoxOutput(\"mean_box\",  width = 4)\r\n    ),\r\n    fluidRow(\r\n      box(title = \"Distribution\", width = 6, status = \"primary\", solidHeader = TRUE,\r\n          plotOutput(\"hist\", height = 280)),\r\n      box(title = \"Scatter (first two numeric cols)\", width = 6, status = \"primary\", solidHeader = TRUE,\r\n          plotOutput(\"scatter\", height = 280))\r\n    ),\r\n    conditionalPanel(\r\n      \"input.show_table\",\r\n      box(title = \"Sample rows\", width = 12,\r\n          tableOutput(\"tbl\"))\r\n    ),\r\n    tags$hr(),\r\n    tags$p(class = \"text-muted\",\r\n           \"Runs entirely in your browser via WebAssembly (webR + shinylive). No server required.\")\r\n  )\r\n)\r\n\r\n# ——— SERVER ———\r\nserver <- function(input, output, session) {\r\n  \r\n  # Pick the data\r\n  dat <- reactive({\r\n    switch(input$dataset,\r\n           iris   = iris,\r\n           mtcars = mtcars\r\n    )\r\n  })\r\n  \r\n  # Build a variable picker of numeric columns for histogram\r\n  output$var_picker <- renderUI({\r\n    nums <- names(dat())[vapply(dat(), is.numeric, logical(1))]\r\n    selectInput(\"var\", \"Numeric variable\", choices = nums, selected = nums[1])\r\n  })\r\n  \r\n  # Sample rows (purely client-side)\r\n  sample_dat <- reactive({\r\n    d <- dat()\r\n    n <- min(input$n, nrow(d))\r\n    d[sample(seq_len(nrow(d)), n), , drop = FALSE]\r\n  })\r\n  \r\n  # KPI boxes\r\n  output$nrows_box <- renderValueBox({\r\n    valueBox(nrow(dat()), \"Rows\", icon = icon(\"database\"))\r\n  })\r\n  output$ncols_box <- renderValueBox({\r\n    valueBox(ncol(dat()), \"Columns\", color = \"teal\", icon = icon(\"table\"))\r\n  })\r\n  output$mean_box <- renderValueBox({\r\n    req(input$var)\r\n    m <- mean(dat()[[input$var]], na.rm = TRUE)\r\n    valueBox(round(m, 3), paste(\"Mean of\", input$var), color = \"purple\", icon = icon(\"chart-line\"))\r\n  })\r\n  \r\n  # Plots\r\n  output$hist <- renderPlot({\r\n    req(input$var)\r\n    x <- dat()[[input$var]]\r\n    hist(x, main = paste(\"Histogram of\", input$var), xlab = NULL, col = \"gray\")\r\n  })\r\n  \r\n  output$scatter <- renderPlot({\r\n    d <- dat()\r\n    nums <- names(d)[vapply(d, is.numeric, logical(1))]\r\n    if (length(nums) >= 2) {\r\n      plot(d[[nums[1]]], d[[nums[2]]],\r\n           xlab = nums[1], ylab = nums[2], pch = 19)\r\n    } else {\r\n      plot.new(); title(\"Need ≥ 2 numeric columns\")\r\n    }\r\n  })\r\n  \r\n  # Table\r\n  output$tbl <- renderTable({\r\n    head(sample_dat(), 10)\r\n  }, striped = TRUE, bordered = TRUE, spacing = \"s\")\r\n}\r\n\r\nshinyApp(ui, server)\r\n","type":"text"}]
